(window.webpackJsonp=window.webpackJsonp||[]).push([[2],{352:function(e,t,n){"use strict";n.r(t);var a=n(0),i=n.n(a),r=n(149),l=n(155),o=n(157),c=n(351),s=n(156),m=n(76),u=n(53),h=n(32),p=function(e){var t,n,a,i,r=(t=document.querySelector(".hljs-comment"))&&"none"===t.style.display?e.map(function(e){return e.split("//")[0]}):e;n=r.join("\n"),a=document.documentElement.scrollTop||document.body.scrollTop,(i=document.createElement("textarea")).value=n,document.body.appendChild(i),i.focus(),i.select(),document.execCommand("copy"),document.body.removeChild(i),scroll(0,a)},f=n(39);function d(){return(d=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e}).apply(this,arguments)}function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function E(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=[],a=!0,i=!1,r=void 0;try{for(var l,o=e[Symbol.iterator]();!(a=(l=o.next()).done)&&(n.push(l.value),!t||n.length!==t);a=!0);}catch(e){i=!0,r=e}finally{try{a||null==o.return||o.return()}finally{if(i)throw r}}return n}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var x=function(e){var t=e.language,n=e.fileName,r=e.lines,l=Object(a.useContext)(u.CodeStyleContext),o=E(Object(a.useContext)(u.CodeDataContext),2),x=o[0],y=o[1],g=Object(a.useContext)(m.a),w=E(Object(a.useState)(!1),2),v=w[0],I=w[1];if(void 0===x[n])return y(n,g),i.a.createElement(h.b,null);var M=E(r,2),O=M[0],j=M[1],B=x[n].slice(O-1,j),C=Object(f.c)(l.style),S=function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},a=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(a=a.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),a.forEach(function(t){b(e,t,n[t])})}return e}({},f.a,{fontSize:l.fontSize});return i.a.createElement(i.a.Fragment,null,i.a.createElement(s.a,{anchorOrigin:{vertical:"bottom",horizontal:"left"},open:v,autoHideDuration:6e3,onClose:function(){return I(!1)},message:i.a.createElement("span",null,"Code copied to clipboard ;)")}),i.a.createElement(c.a,d({customStyle:S,language:t,style:C},{onDoubleClick:function(){I(!0),p(B)}}),B.join("\n")))};function y(){var e=w(["\n            x^n = \n            \begin{cases}\n            (x^2)^{space \frac{n}{2}}           & \text{if n is even}  \\\n            x space (x^2)^{space \frac{n-1}{2}}    & \text{if n is odd}   \\\n            end{cases}\n        "],["\n            x^n = \n            \\begin{cases}\n            (x^2)^{\\space \\frac{n}{2}}           & \\text{if n is even}  \\\\\n            x \\space (x^2)^{\\space \\frac{n-1}{2}}    & \\text{if n is odd}   \\\\\n            \\end{cases}\n        "]);return y=function(){return e},e}function g(){var e=w(["\n            base ^ {exponent} = \n            \begin{cases}\n            (base^2)^{space \frac{exponent}{2}}             & \text{if exponent is even}  \\\n            base space (base^2)^{space \frac{exponent-1}{2}}   & \text{if exponent is odd}   \\\n            end{cases}\n        "],["\n            base ^ {exponent} = \n            \\begin{cases}\n            (base^2)^{\\space \\frac{exponent}{2}}             & \\text{if exponent is even}  \\\\\n            base \\space (base^2)^{\\space \\frac{exponent-1}{2}}   & \\text{if exponent is odd}   \\\\\n            \\end{cases}\n        "]);return g=function(){return e},e}function w(e,t){return t||(t=e.slice(0)),Object.freeze(Object.defineProperties(e,{raw:{value:Object.freeze(t)}}))}t.default=function(){return i.a.createElement("div",null,i.a.createElement(r.a,{gutterBottom:!0,variant:"h5"},i.a.createElement(l.a,{fontWeight:800},"Definition")),i.a.createElement("p",null,"This function will performe ",i.a.createElement(o.InlineMath,{math:"base^{exponent}"})," but a little bit more fast; this will not do ",i.a.createElement(o.InlineMath,{math:"base * base * base * base ..."}),' and so on "',i.a.createElement(o.InlineMath,{math:"exponent"}),'" times but rather just ',i.a.createElement(o.InlineMath,{math:"O(log(exponent))"})," ","operations. This technique is called exponentiation by squaring."),i.a.createElement("p",null,"The idea is to see this way of expressing exponentiation:"),i.a.createElement(o.BlockMath,null,String.raw(g())),i.a.createElement("p",null,"Or if you like small variable names we can say that ",i.a.createElement(o.InlineMath,{math:"base = x"})," and"," ",i.a.createElement(o.InlineMath,{math:"exponent = n"}),":"),i.a.createElement(o.BlockMath,null,String.raw(y())),i.a.createElement(x,{language:"cpp",fileName:"BinaryExponentiation.cpp",lines:[1,8]}),i.a.createElement(r.a,{gutterBottom:!0,variant:"h5"},i.a.createElement(l.a,{fontWeight:800},"Simple Optimizations")),i.a.createElement("p",null,"Now we want to eliminate the recursion and modify a little bit the idea:"),i.a.createElement("ul",null,i.a.createElement("li",{style:{marginBottom:"0.7rem"}},"Instead of making a recursive function we will do an iterative function, to do this we use a while loop with the stop condition being when the exponent is 0; this represents that we have made all the operations necessary so we can just safely return"," ",i.a.createElement(o.InlineMath,{math:"solution"}),"."),i.a.createElement("li",{style:{marginBottom:"0.7rem"}},"Now, for each step in the recursive call we have to check if the exponent is odd, in this case we had this expression:"," ",i.a.createElement(o.InlineMath,{math:"x^n = x \\space (x^2)^{\\space \\frac{n-1}{2}}"}),".",i.a.createElement("br",null),"So now, we have to keep in mind we need to multiply the result by the current"," ",i.a.createElement(o.InlineMath,{math:"base"}),", that super simple now because we only need to update the"," ",i.a.createElement(o.InlineMath,{math:"solution"})," by a factor of ",i.a.createElement(o.InlineMath,{math:"base"}),"."),i.a.createElement("li",{style:{marginBottom:"0.7rem"}},"Either way, the base in the next recursive call will be square of the current one, so we do that."),i.a.createElement("li",{style:{marginBottom:"0.7rem"}},"Finally, remember that ",i.a.createElement(o.InlineMath,{math:"\\frac{exponent}{2}"})," is doing a integer division, so in reality it is doing"," ",i.a.createElement(o.InlineMath,{math:"\\lfloor \\frac{exponent}{2} \\rfloor"})," and that is exaclty what we wanted because it handles correctly both cases, odd and even exponent.")),i.a.createElement(x,{language:"cpp",fileName:"BinaryExponentiation.cpp",lines:[10,26]}),i.a.createElement(r.a,{gutterBottom:!0,variant:"h5"},i.a.createElement(l.a,{fontWeight:800},"Optimizations")),i.a.createElement(r.a,{gutterBottom:!0,variant:"subtitle1"},i.a.createElement(l.a,{fontWeight:600},"How to optimize ",i.a.createElement(o.InlineMath,{math:"e = \\frac{e-1}{2}"})," and"," ",i.a.createElement(o.InlineMath,{math:"e = \\frac{e}{2}"}))),i.a.createElement("p",null,"Remember the bitwise operations equalities:"),i.a.createElement("ul",null,i.a.createElement("li",null,i.a.createElement(o.InlineMath,{math:"x << y = x * 2^y"})),i.a.createElement("li",null,i.a.createElement(o.InlineMath,{math:"x >> y = \\left \\lfloor \\dfrac{x}{2^y} \\right \\rfloor"}))),i.a.createElement("p",null,"This optimizations are using the bitwise operations. I claim that"," ",i.a.createElement(o.InlineMath,{math:"e = \\frac{e-1}{2}"})," and ",i.a.createElement(o.InlineMath,{math:"e = \\frac{e}{2}"})," are equal to ",i.a.createElement(o.InlineMath,{math:"e = e >> 1"})),i.a.createElement("p",null,"This is easy to proof, because ",i.a.createElement(o.InlineMath,{math:"e = e >> 1"})," delete the least significant bit, so the last bit does not really matter. So you find that at the end it does not matter if it is odd or even this will always give you the correct answer."),i.a.createElement(r.a,{gutterBottom:!0,variant:"subtitle1"},i.a.createElement(l.a,{fontWeight:600},"Check in the exponent is odd or even")),i.a.createElement("p",null,"To do this just do exponent & 1."),i.a.createElement("p",null,"For example the number ",i.a.createElement(o.InlineMath,{math:"000101101010"})," if the exponent was odd then the last digit will be 1, so exponent & 1 give true only if the last digit was 1."),i.a.createElement(x,{language:"cpp",fileName:"BinaryExponentiation.cpp",lines:[28,40]}),i.a.createElement(r.a,{gutterBottom:!0,variant:"h5"},i.a.createElement(l.a,{fontWeight:800},"Modular Exponentation")),i.a.createElement("p",null,"This is to do ",i.a.createElement(o.InlineMath,{math:"base^{exponent}  \\space \\space \\mod \\space n"})),i.a.createElement(x,{language:"cpp",fileName:"BinaryExponentiation.cpp",lines:[42,56]}))}}}]);