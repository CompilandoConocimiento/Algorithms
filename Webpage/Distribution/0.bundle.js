(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "./Code/App/AlgorithmVisualizer/LaTeX.tsx":
/*!************************************************!*\
  !*** ./Code/App/AlgorithmVisualizer/LaTeX.tsx ***!
  \************************************************/
/*! exports provided: LaTeX */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LaTeX\", function() { return LaTeX; });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n\nvar LaTeX = function LaTeX(props) {\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", {\n    style: {\n      overflow: \"auto\"\n    }\n  }, \"$$\", \"\".concat(props.children), \"$$\");\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9Db2RlL0FwcC9BbGdvcml0aG1WaXN1YWxpemVyL0xhVGVYLnRzeC5qcyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL0NvZGUvQXBwL0FsZ29yaXRobVZpc3VhbGl6ZXIvTGFUZVgudHN4PzVlMWQiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiXG5cbmV4cG9ydCBjb25zdCBMYVRlWDogUmVhY3QuRnVuY3Rpb25Db21wb25lbnQgPSBwcm9wcyA9PiAoXG4gIDxkaXYgc3R5bGU9e3sgb3ZlcmZsb3c6IFwiYXV0b1wiIH19PiQke2Ake3Byb3BzLmNoaWxkcmVufWB9JCQ8L2Rpdj5cbilcbiJdLCJtYXBwaW5ncyI6IkFBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUVBO0FBQUE7QUFDQTtBQUFBO0FBQUE7QUFBQTtBQURBIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./Code/App/AlgorithmVisualizer/LaTeX.tsx\n");

/***/ }),

/***/ "./Code/Data/NumberTheory/BinaryExponentation.tsx":
/*!********************************************************!*\
  !*** ./Code/Data/NumberTheory/BinaryExponentation.tsx ***!
  \********************************************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"./node_modules/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _App_AlgorithmVisualizer_ShowCode__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../App/AlgorithmVisualizer/ShowCode */ \"./Code/App/AlgorithmVisualizer/ShowCode.tsx\");\n/* harmony import */ var _App_AlgorithmVisualizer_LaTeX__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../App/AlgorithmVisualizer/LaTeX */ \"./Code/App/AlgorithmVisualizer/LaTeX.tsx\");\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n                        x^n = \\n                        \\begin{cases}\\n                        (x^2)^{; \\frac{n}{2}}           & \\text{if n is even}  \\\\\\n                        x ; (x^2)^{; \\frac{n-1}{2}}    & \\text{if n is odd}   \\\\\\n                        end{cases}\\n                    \"], [\"\\n                        x^n = \\n                        \\\\begin{cases}\\n                        (x^2)^{\\\\; \\\\frac{n}{2}}           & \\\\text{if n is even}  \\\\\\\\\\n                        x \\\\; (x^2)^{\\\\; \\\\frac{n-1}{2}}    & \\\\text{if n is odd}   \\\\\\\\\\n                        \\\\end{cases}\\n                    \"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n                        base ^ {exponent} = \\n                        \\begin{cases}\\n                        (base^2)^{; \\frac{exponent}{2}}             & \\text{if exponent is even}  \\\\\\n                        base ; (base^2)^{; \\frac{exponent-1}{2}}   & \\text{if exponent is odd}   \\\\\\n                        end{cases}\\n                    \"], [\"\\n                        base ^ {exponent} = \\n                        \\\\begin{cases}\\n                        (base^2)^{\\\\; \\\\frac{exponent}{2}}             & \\\\text{if exponent is even}  \\\\\\\\\\n                        base \\\\; (base^2)^{\\\\; \\\\frac{exponent-1}{2}}   & \\\\text{if exponent is odd}   \\\\\\\\\\n                        \\\\end{cases}\\n                    \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }\n\n\n\n\nvar PageConfig = {\n  filesData: {\n    \"BinaryExponentiation.cpp\": [{\n      name: \"RecursiveBinExpo\",\n      parts: [1, 8]\n    }, {\n      name: \"SimpleBinExpo\",\n      parts: [10, 25]\n    }, {\n      name: \"BinExpo\",\n      parts: [27, 39]\n    }, {\n      name: \"ModularBinExpo\",\n      parts: [41, 54]\n    }]\n  },\n  CodeConfig: {\n    CodeStyles: {\n      fontSize: 0.9,\n      theme: \"\"\n    },\n    CodeActions: {}\n  }\n};\n\nvar BinaryExponentation = function BinaryExponentation(_ref) {\n  var filesData = _ref.filesData;\n  return react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"div\", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"h5\", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"b\", null, \"Definition\")), \"This function will performe \\\\( \", \"base^{exponent}\", \" \\\\) but a little bit more fast using exponentiation by squaring. The idea is to see this way of expressing exponentiation:\", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_App_AlgorithmVisualizer_LaTeX__WEBPACK_IMPORTED_MODULE_2__[\"LaTeX\"], null, String.raw(_templateObject())), \"Or if you like small variable names we can say that \\\\( base = x \\\\) y \\\\( exponent = n \\\\):\", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_App_AlgorithmVisualizer_LaTeX__WEBPACK_IMPORTED_MODULE_2__[\"LaTeX\"], null, String.raw(_templateObject2())), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_App_AlgorithmVisualizer_ShowCode__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n    Data: filesData,\n    fileName: \"BinaryExponentiation.cpp\",\n    partOfFile: \"RecursiveBinExpo\"\n  }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"br\", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"h5\", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"b\", null, \"Simple Optimizations\")), \"Now we want to eliminate the recursion and modify a little bit the idea:\", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"ul\", {\n    className: \"browser-default\"\n  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"li\", null, \"If exponent is odd, first do \\\\( \", \"solution = base * solution\", \" \\\\), now, we have to delete 1 to the exponent, so the exponent is even, so we can just say that the base is \\\\( \", \"base = base^2\", \" \\\\) and that the exponent is just the half of the original exponent.\"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"li\", null, \"If exponent is even, so we can just say that the base is \\\\( \", \"base = base^2\", \" \\\\) and that the exponent is just the half of the original exponent.\")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_App_AlgorithmVisualizer_ShowCode__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n    Data: filesData,\n    fileName: \"BinaryExponentiation.cpp\",\n    partOfFile: \"SimpleBinExpo\"\n  }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"br\", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"h5\", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"b\", null, \"Optimizations\")), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"h6\", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"b\", null, \"How to optimize \\\\( \", \"e = \\\\frac{e-1}{2} \", \" \\\\) and \\\\( \", \"e = \\\\frac{e}{2} \", \" \\\\) \")), \"Remember the bitwise operations equalities:\", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"ul\", {\n    className: \"browser-default\"\n  }, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"li\", null, \" \", \"\\\\( x << y = x * 2^y \\\\)\", \" \"), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"li\", null, \" \", \"\\\\( x >> y = \\\\left \\\\lfloor \\\\dfrac{x}{2^y} \\\\right \\\\rfloor \\\\)\", \" \")), \"This optimizations are using the bitwise operations. I claim that \\\\( \", \"e = \\\\frac{e-1}{2} \", \" \\\\) and \\\\( \", \"e = \\\\frac{e}{2} \", \"\\\\) are equal to \\\\( \", \"e = e >> 1\", \"\\\\).\", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"br\", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"br\", null), \"This is easy to proof, because \\\\( \", \"e = e >> 1\", \"\\\\) delete the least significant bit, so the last bit does not really matter. So you find that at the end it does not matter if it is odd or even this will always give you the correct answer.\", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"br\", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"br\", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"h6\", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"b\", null, \"Check in the exponent is odd or even\")), \"To do this just do exponent & 1\", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"br\", null), \"For example the number \\\\(000101101010\\\\) if the exponent was odd then the last digit will be 1, so exponent & 1 give true only if the last digit was 1.\", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_App_AlgorithmVisualizer_ShowCode__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n    Data: filesData,\n    fileName: \"BinaryExponentiation.cpp\",\n    partOfFile: \"BinExpo\"\n  }), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"br\", null), react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"h5\", null, react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(\"b\", null, \"Modular Exponentation\")), \"This is to do \\\\( \", \"base^{exponent}\\\\mod n\", \"\\\\)\", react__WEBPACK_IMPORTED_MODULE_0___default.a.createElement(_App_AlgorithmVisualizer_ShowCode__WEBPACK_IMPORTED_MODULE_1__[\"default\"], {\n    Data: filesData,\n    fileName: \"BinaryExponentiation.cpp\",\n    partOfFile: \"ModularBinExpo\"\n  }));\n};\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  Config: PageConfig,\n  Component: BinaryExponentation\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./Code/Data/NumberTheory/BinaryExponentation.tsx\n");

/***/ })

}]);